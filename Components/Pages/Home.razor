@page "/"
@rendermode InteractiveServer
@attribute [Authorize]

@using Greenhouse.Data.Interfaces
@using Greenhouse.Data.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Syncfusion.Blazor.Layouts
@using Syncfusion.Blazor.CircularGauge
@using Syncfusion.Blazor.Charts

@inject IGreenhouseMetricService GreenhouseMetricService
@inject IGreenhouseMetricExtension GreenhouseMetricExtension

<PageTitle>Dashboard</PageTitle>
<AuthorizeView>
    <Authorized>
        @if (_latestMetric == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div class="content">
                <SfDashboardLayout CellSpacing="@(new double[] { 20, 20 })" Columns="3">
                    <DashboardLayoutEvents Created="Created" OnWindowResize="@ResizingWindow"
                                           Resizing="@ResizingWindow"></DashboardLayoutEvents>
                    <DashboardLayoutPanels>
                        <DashboardLayoutPanel Row="0">
                            <HeaderTemplate>
                                <div class='header'>Temperature</div>
                            </HeaderTemplate>
                            <ContentTemplate>
                                @if (IsInitialRender)
                                {
                                    <SfCircularGauge ID="Temperature" @ref="_temperature" Background="transparent"
                                                     Height="150%" Width="100%">
                                        <CircularGaugeAxes>
                                            <CircularGaugeAxis StartAngle="270" EndAngle="90" Minimum="10" Maximum="40" >
                                                <CircularGaugeRanges>
                                                    <CircularGaugeRange Start=17 End=25 Color="Green"></CircularGaugeRange>
                                                    <CircularGaugeRange Start=0 End=17 ></CircularGaugeRange>
                                                    <CircularGaugeRange Start=25 End=40 Color="Red"></CircularGaugeRange>
                                                </CircularGaugeRanges>
                                                <CircularGaugePointers>
                                                    <CircularGaugePointer Value=@_latestMetric.Temperature></CircularGaugePointer>
                                                </CircularGaugePointers>
                                            </CircularGaugeAxis>
                                        </CircularGaugeAxes>
                                    </SfCircularGauge>
                                }
                            </ContentTemplate>
                        </DashboardLayoutPanel>
                        <DashboardLayoutPanel SizeX=2 Column=2 Row="0">
                            <ContentTemplate>
                                <SfChart>
                                    <ChartPrimaryXAxis
                                        ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
                                    <ChartSeriesCollection>
                                        <ChartSeries 
                                            DataSource="@_last7DaysMetrics"
                                            XName="DateTime"
                                            YName="Temperature"
                                            Type="ChartSeriesType.MultiColoredLine">
                                            
                                        </ChartSeries>
                                    </ChartSeriesCollection>
                                </SfChart>
                            </ContentTemplate>
                        </DashboardLayoutPanel>
                        <DashboardLayoutPanel Row="1">
                            <HeaderTemplate>
                                <div class='header'>Humidity</div>
                            </HeaderTemplate>
                            <ContentTemplate>
                                @if (IsInitialRender)
                                {
                                    <SfCircularGauge ID="Humidity" @ref="_humidity" Background="transparent"
                                                     Height="150%" Width="100%">
                                        <CircularGaugeAxes>
                                            <CircularGaugeAxis StartAngle="270" EndAngle="90" Minimum="20" Maximum="90" >
                                                <CircularGaugeRanges>
                                                    <CircularGaugeRange Start=40 End=60 Color="Green"></CircularGaugeRange>
                                                    <CircularGaugeRange Start=60 End=90 ></CircularGaugeRange>
                                                    <CircularGaugeRange Start=20 End=40 Color="Red"></CircularGaugeRange>
                                                </CircularGaugeRanges>
                                                <CircularGaugePointers>
                                                    <CircularGaugePointer Value=@_latestMetric.Humidity></CircularGaugePointer>
                                                </CircularGaugePointers>
                                            </CircularGaugeAxis>
                                        </CircularGaugeAxes>
                                    </SfCircularGauge>
                                }
                            </ContentTemplate>
                        </DashboardLayoutPanel>
                        <DashboardLayoutPanel SizeX=2 Column=2 Row="1">
                            <ContentTemplate>
                                <div>2</div>
                            </ContentTemplate>
                        </DashboardLayoutPanel>
                        <DashboardLayoutPanel Row=2>
                            <HeaderTemplate>
                                <div class='header'>Soil Moisture</div>
                            </HeaderTemplate>
                            <ContentTemplate>
                                @if (IsInitialRender)
                                {
                                    <SfCircularGauge ID="SoilMoisture" @ref="_humidity" Background="transparent"
                                                     Height="150%" Width="100%">
                                        <CircularGaugeAxes>
                                            <CircularGaugeAxis StartAngle="270" EndAngle="90" Minimum="20" Maximum="90" >
                                                <CircularGaugeRanges>
                                                    <CircularGaugeRange Start=40 End=60 Color="Green"></CircularGaugeRange>
                                                    <CircularGaugeRange Start=60 End=90 ></CircularGaugeRange>
                                                    <CircularGaugeRange Start=20 End=40 Color="Red"></CircularGaugeRange>
                                                </CircularGaugeRanges>
                                                <CircularGaugePointers>
                                                    <CircularGaugePointer Value=20></CircularGaugePointer>
                                                </CircularGaugePointers>
                                            </CircularGaugeAxis>
                                        </CircularGaugeAxes>
                                    </SfCircularGauge>
                                }
                            </ContentTemplate>
                        </DashboardLayoutPanel>
                        <DashboardLayoutPanel SizeX=2 Column=2 Row="2">
                            <ContentTemplate>
                                <div>2</div>
                            </ContentTemplate>
                        </DashboardLayoutPanel>
                    </DashboardLayoutPanels>
                </SfDashboardLayout>
            </div>
        }

        @code
        {
            private SfCircularGauge? _temperature;
            private SfCircularGauge? _humidity;
            private GreenhouseMetric? _latestMetric;
            private List<GreenhouseMetric> _last7DaysMetrics = [];
            
            private bool IsInitialRender { get; set; }

            private Timer? _resizeTimer;

            public async void Created(Object args)
            {
                await Task.Yield();
                IsInitialRender = true;
            }
            
            protected override async Task OnInitializedAsync()
            {
                _latestMetric = await GreenhouseMetricService.GetLatestMetric();
                _last7DaysMetrics = await GreenhouseMetricService.GetLast7DaysMetrics();
            }

            private async Task ResizingWindow(ResizeArgs args)
            {
                if (_resizeTimer != null)
                {
                    _resizeTimer.Dispose();
                }

                _resizeTimer = new Timer(async _ => { await InvokeAsync(() => { RefreshComponents(); }); }, null, 500, Timeout.Infinite);
            }

            private async Task RefreshComponents()
            {
                await Task.Yield();
                if (_temperature != null) await _temperature.RefreshAsync();
                if (_humidity != null) await _humidity.RefreshAsync();
            }
        }
    </Authorized>
    <NotAuthorized>
        <p><em>You are not authorized to view this page. Please login first...</em></p>
    </NotAuthorized>
</AuthorizeView>
