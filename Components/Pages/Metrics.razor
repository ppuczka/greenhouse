@page "/metrics"
@using Greenhouse.Data.Interfaces
@using Greenhouse.Data.Models

@rendermode InteractiveServer

@inject IGreenhouseMetricService GreenhouseMetricService

<PageTitle>Greenhouse Metrics</PageTitle>

<h2>Metrics</h2>

@if (_metricsList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date and time</th>
            <th>Temperature (C)</th>
            <th>Humidity (%)</th>
            <th>Humidity level</th>
            <th>Soil moisture</th>
            <th>Soil moisture level</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody> @foreach (var metric in _metricsList)
        {
            <tr @onclick="() => ToggleRow(metric)">
                <td>@metric.DateTime</td>
                <td>@metric.Temperature</td>
                <td>@metric.Humidity</td>
                <td>@metric.HumidityLevel</td>
                <td>@metric.SoilMoisture</td>
                <td>@metric.SoilMoistureLevel</td>
                <td>
                    @* <button class="btn btn-primary btn-sm" @onclick="AddComment">Add comment</button> *@
                    <button class="btn btn-danger btn-sm" @onclick="(e) => OnDeleteClick(metric.Id)">Delete</button>
                </td>
            </tr> @if (metric.IsExpanded)
            {
                <tr>
                    <td colspan="7">
                        <div class="alert alert-dark">
                            @if (metric.Comments.Count > 0)
                            {
                                <h5>Comments:</h5>
                                <ul>
                                    @foreach (var comment in @metric.Comments)
                                    {
                                        <li>
                                            <span> <b>Date created:</b> @comment.Created <b>Text:</b> @comment.Comment</span>
                                        </li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <p>No comments added yet</p>
                            }
                            <button class="btn btn-primary btn-sm add-comment-btn" @onclick="() => ToggleCommentField(metric)">Add Comment
                            </button>
                            @if (metric.IsCommentFieldVisible)
                            {
                                <div class="form-group mt-2">
                                    <input type="text" class="form-control" placeholder="Enter your comment"/>
                                    <button class="btn btn-success btn-sm mt-1" @onclick="() => AddComment(metric.Id)">
                                        Submit
                                    </button>
                                </div>
                            }
                        </div>
                    </td>
                </tr>
            }
        }
        </tbody>
    </table>
}

@code

{
    private List<GreenhouseMetric>? _metricsList;

    protected override async Task OnInitializedAsync()
    {
        await LoadMetrics();
    }

    private async Task LoadMetrics()
    {
        _metricsList = await GreenhouseMetricService.GetGreenhouseMetrics();
    }

    private async Task OnDeleteClick(string toDelete)
    {
        // e.StopPropagation(); 
        await GreenhouseMetricService.DeleteMetric(toDelete);
        await LoadMetrics();
    }
    
    private Task AddComment(string metricId)
    {
        throw new NotImplementedException();
    }

    private void ToggleRow(GreenhouseMetric metric)
    {
        metric.IsExpanded = !metric.IsExpanded;
    }
    
    private void ToggleCommentField(GreenhouseMetric metric)
    {
        metric.IsCommentFieldVisible = !metric.IsCommentFieldVisible;
    }

    
}
